From c02cc98e321a62b88e1568657b0055671c7ecc99 Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Wed, 13 Jul 2022 15:15:35 +0200
Subject: [PATCH 2/2] Add mlibc support

Signed-off-by: Dennis Bonke <admin@dennisbonke.com>
---
 .../sanitizer_linux_libcdep.cpp               |   5 +-
 .../sanitizer_platform_limits_posix.cpp       | 149 ++++++++++--------
 .../sanitizer_common/sanitizer_posix.cpp      |   1 +
 3 files changed, 91 insertions(+), 64 deletions(-)

diff --git a/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp b/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp
index bc10e89b1..bb495069b 100644
--- a/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp
@@ -238,18 +238,21 @@ bool CmpLibcVersion(int major, int minor, int patch) {
 void InitTlsSize() {
   // all current supported platforms have 16 bytes stack alignment
   const size_t kStackAlign = 16;
-  void *get_tls_static_info_ptr = dlsym(RTLD_NEXT, "_dl_get_tls_static_info");
+  // void *get_tls_static_info_ptr = dlsym(RTLD_NEXT, "_dl_get_tls_static_info");
   size_t tls_size = 0;
   size_t tls_align = 0;
   // On i?86, _dl_get_tls_static_info used to be internal_function, i.e.
   // __attribute__((regparm(3), stdcall)) before glibc 2.27 and is normal
   // function in 2.27 and later.
+#if 0
   if (CHECK_GET_TLS_STATIC_INFO_VERSION && !CmpLibcVersion(2, 27, 0))
     CallGetTls<GetTlsStaticInfoRegparmCall>(get_tls_static_info_ptr,
                                             &tls_size, &tls_align);
   else
     CallGetTls<GetTlsStaticInfoCall>(get_tls_static_info_ptr,
                                      &tls_size, &tls_align);
+#endif
+  tls_size = 16;
   if (tls_align < kStackAlign)
     tls_align = kStackAlign;
   g_tls_size = RoundUpTo(tls_size, tls_align);
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
index 025e575b5..5681aaf00 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
@@ -920,8 +920,11 @@ using namespace __sanitizer;
 
 COMPILER_CHECK(sizeof(__sanitizer_pthread_attr_t) >= sizeof(pthread_attr_t));
 
-COMPILER_CHECK(sizeof(socklen_t) == sizeof(unsigned));
-CHECK_TYPE_SIZE(pthread_key_t);
+// MANAGARM HACK: We have it as unsigned long
+// COMPILER_CHECK(sizeof(socklen_t) == sizeof(unsigned));
+
+// MANAGARM HACK: Idk?
+// CHECK_TYPE_SIZE(pthread_key_t);
 
 #if SANITIZER_LINUX
 // FIXME: We define those on Linux and Mac, but only check on Linux.
@@ -977,7 +980,8 @@ CHECK_SIZE_AND_OFFSET(addrinfo, ai_family);
 CHECK_SIZE_AND_OFFSET(addrinfo, ai_socktype);
 CHECK_SIZE_AND_OFFSET(addrinfo, ai_protocol);
 CHECK_SIZE_AND_OFFSET(addrinfo, ai_protocol);
-CHECK_SIZE_AND_OFFSET(addrinfo, ai_addrlen);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_SIZE_AND_OFFSET(addrinfo, ai_addrlen);
 CHECK_SIZE_AND_OFFSET(addrinfo, ai_canonname);
 CHECK_SIZE_AND_OFFSET(addrinfo, ai_addr);
 
@@ -993,10 +997,11 @@ CHECK_SIZE_AND_OFFSET(iovec, iov_base);
 CHECK_SIZE_AND_OFFSET(iovec, iov_len);
 
 CHECK_TYPE_SIZE(msghdr);
-CHECK_SIZE_AND_OFFSET(msghdr, msg_name);
-CHECK_SIZE_AND_OFFSET(msghdr, msg_namelen);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_SIZE_AND_OFFSET(msghdr, msg_name);
+// CHECK_SIZE_AND_OFFSET(msghdr, msg_namelen);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_iov);
-CHECK_SIZE_AND_OFFSET(msghdr, msg_iovlen);
+// CHECK_SIZE_AND_OFFSET(msghdr, msg_iovlen);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_control);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_controllen);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_flags);
@@ -1041,19 +1046,24 @@ CHECK_SIZE_AND_OFFSET(pollfd, revents);
 
 CHECK_TYPE_SIZE(nfds_t);
 
-CHECK_TYPE_SIZE(sigset_t);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(sigset_t);
 
-COMPILER_CHECK(sizeof(__sanitizer_sigaction) == sizeof(struct sigaction));
+// MANAGARM HACK: UNIMPLEMENTED
+// COMPILER_CHECK(sizeof(__sanitizer_sigaction) == sizeof(struct sigaction));
 // Can't write checks for sa_handler and sa_sigaction due to them being
 // preprocessor macros.
-CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_mask);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_mask);
 #if !defined(__s390x__) || __GLIBC_PREREQ (2, 20)
 // On s390x glibc 2.19 and earlier sa_flags was unsigned long, and sa_resv
 // didn't exist.
-CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_flags);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_flags);
 #endif
 #if SANITIZER_LINUX && (!SANITIZER_ANDROID || !SANITIZER_MIPS32)
-CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_restorer);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_restorer);
 #endif
 
 #if SANITIZER_LINUX
@@ -1079,7 +1089,8 @@ CHECK_TYPE_SIZE(__kernel_fd_set);
 #endif
 
 #if !SANITIZER_ANDROID
-CHECK_TYPE_SIZE(wordexp_t);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(wordexp_t);
 CHECK_SIZE_AND_OFFSET(wordexp_t, we_wordc);
 CHECK_SIZE_AND_OFFSET(wordexp_t, we_wordv);
 CHECK_SIZE_AND_OFFSET(wordexp_t, we_offs);
@@ -1111,13 +1122,15 @@ CHECK_SIZE_AND_OFFSET(mntent, mnt_passno);
 CHECK_TYPE_SIZE(ether_addr);
 
 #if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
-CHECK_TYPE_SIZE(ipc_perm);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(ipc_perm);
 # if SANITIZER_FREEBSD
 CHECK_SIZE_AND_OFFSET(ipc_perm, key);
 CHECK_SIZE_AND_OFFSET(ipc_perm, seq);
 # else
-CHECK_SIZE_AND_OFFSET(ipc_perm, __key);
-CHECK_SIZE_AND_OFFSET(ipc_perm, __seq);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_SIZE_AND_OFFSET(ipc_perm, __key);
+// CHECK_SIZE_AND_OFFSET(ipc_perm, __seq);
 # endif
 CHECK_SIZE_AND_OFFSET(ipc_perm, uid);
 CHECK_SIZE_AND_OFFSET(ipc_perm, gid);
@@ -1129,29 +1142,32 @@ CHECK_SIZE_AND_OFFSET(ipc_perm, cgid);
 CHECK_SIZE_AND_OFFSET(ipc_perm, mode);
 #endif
 
-CHECK_TYPE_SIZE(shmid_ds);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_perm);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_segsz);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_atime);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_dtime);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_ctime);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_cpid);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_lpid);
-CHECK_SIZE_AND_OFFSET(shmid_ds, shm_nattch);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(shmid_ds);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_perm);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_segsz);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_atime);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_dtime);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_ctime);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_cpid);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_lpid);
+// CHECK_SIZE_AND_OFFSET(shmid_ds, shm_nattch);
 #endif
 
 CHECK_TYPE_SIZE(clock_t);
 
 #if SANITIZER_LINUX
-CHECK_TYPE_SIZE(clockid_t);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(clockid_t);
 #endif
 
 #if !SANITIZER_ANDROID
-CHECK_TYPE_SIZE(ifaddrs);
-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_next);
-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_name);
-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_addr);
-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(ifaddrs);
+// CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_next);
+// CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_name);
+// CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_addr);
+// CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);
 #if SANITIZER_LINUX || SANITIZER_FREEBSD
 // Compare against the union, because we can't reach into the union in a
 // compliant way.
@@ -1161,27 +1177,31 @@ CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);
 # if SANITIZER_FREEBSD
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_dstaddr);
 # else
-COMPILER_CHECK(sizeof(((__sanitizer_ifaddrs *)nullptr)->ifa_dstaddr) ==
-               sizeof(((ifaddrs *)nullptr)->ifa_ifu));
-COMPILER_CHECK(offsetof(__sanitizer_ifaddrs, ifa_dstaddr) ==
-               offsetof(ifaddrs, ifa_ifu));
+// MANAGARM HACK: UNIMPLEMENTED
+// COMPILER_CHECK(sizeof(((__sanitizer_ifaddrs *)nullptr)->ifa_dstaddr) ==
+//                sizeof(((ifaddrs *)nullptr)->ifa_ifu));
+// COMPILER_CHECK(offsetof(__sanitizer_ifaddrs, ifa_dstaddr) ==
+               // offsetof(ifaddrs, ifa_ifu));
 # endif // SANITIZER_FREEBSD
 #else
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_dstaddr);
 #endif // SANITIZER_LINUX
-CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_data);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_data);
 #endif
 
 #if SANITIZER_LINUX
-COMPILER_CHECK(sizeof(__sanitizer_struct_mallinfo) == sizeof(struct mallinfo));
+// MANAGARM HACK: UNIMPLEMENTED
+// COMPILER_CHECK(sizeof(__sanitizer_struct_mallinfo) == sizeof(struct mallinfo));
 #endif
 
 #if !SANITIZER_ANDROID
-CHECK_TYPE_SIZE(timeb);
-CHECK_SIZE_AND_OFFSET(timeb, time);
-CHECK_SIZE_AND_OFFSET(timeb, millitm);
-CHECK_SIZE_AND_OFFSET(timeb, timezone);
-CHECK_SIZE_AND_OFFSET(timeb, dstflag);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(timeb);
+// CHECK_SIZE_AND_OFFSET(timeb, time);
+// CHECK_SIZE_AND_OFFSET(timeb, millitm);
+// CHECK_SIZE_AND_OFFSET(timeb, timezone);
+// CHECK_SIZE_AND_OFFSET(timeb, dstflag);
 #endif
 
 CHECK_TYPE_SIZE(passwd);
@@ -1223,22 +1243,23 @@ COMPILER_CHECK(__sanitizer_XDR_FREE == XDR_FREE);
 #endif
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
-COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
-CHECK_SIZE_AND_OFFSET(FILE, _flags);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_read_end);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_read_base);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_write_ptr);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_write_end);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_write_base);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_buf_base);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_buf_end);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_save_base);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_backup_base);
-CHECK_SIZE_AND_OFFSET(FILE, _IO_save_end);
-CHECK_SIZE_AND_OFFSET(FILE, _markers);
-CHECK_SIZE_AND_OFFSET(FILE, _chain);
-CHECK_SIZE_AND_OFFSET(FILE, _fileno);
+// MANAGARM HACK: UNIMPLEMENTED BULLSHIT
+// COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
+// CHECK_SIZE_AND_OFFSET(FILE, _flags);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_read_end);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_read_base);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_write_ptr);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_write_end);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_write_base);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_buf_base);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_buf_end);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_save_base);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_backup_base);
+// CHECK_SIZE_AND_OFFSET(FILE, _IO_save_end);
+// CHECK_SIZE_AND_OFFSET(FILE, _markers);
+// CHECK_SIZE_AND_OFFSET(FILE, _chain);
+// CHECK_SIZE_AND_OFFSET(FILE, _fileno);
 #endif
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
@@ -1251,15 +1272,17 @@ CHECK_SIZE_AND_OFFSET(obstack, chunk);
 CHECK_SIZE_AND_OFFSET(obstack, object_base);
 CHECK_SIZE_AND_OFFSET(obstack, next_free);
 
-CHECK_TYPE_SIZE(cookie_io_functions_t);
-CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, read);
-CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, write);
-CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, seek);
-CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, close);
+// MANAGARM HACK: UNIMPLEMENTED!
+// CHECK_TYPE_SIZE(cookie_io_functions_t);
+// CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, read);
+// CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, write);
+// CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, seek);
+// CHECK_SIZE_AND_OFFSET(cookie_io_functions_t, close);
 #endif
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD
-CHECK_TYPE_SIZE(sem_t);
+// MANAGARM HACK: UNIMPLEMENTED
+// CHECK_TYPE_SIZE(sem_t);
 #endif
 
 #if SANITIZER_LINUX && defined(__arm__)
diff --git a/libsanitizer/sanitizer_common/sanitizer_posix.cpp b/libsanitizer/sanitizer_common/sanitizer_posix.cpp
index 2e0800982..c1be7d46b 100644
--- a/libsanitizer/sanitizer_common/sanitizer_posix.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_posix.cpp
@@ -26,6 +26,7 @@
 #include <fcntl.h>
 #include <signal.h>
 #include <sys/mman.h>
+#include <sys/stat.h>
 
 #if SANITIZER_FREEBSD
 // The MAP_NORESERVE define has been removed in FreeBSD 11.x, and even before
-- 
2.36.1

